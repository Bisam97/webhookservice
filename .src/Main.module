' Gambas module file

Private server As New ServerSocket As "server"
Private port_number As Integer
Private socket_list As New Socket[]
Private $conf As String[]
Private webhooks As New Webhook[]
Private $triggerList As String[]
Private $log As Logger

Private $conFilter As String '' like Filter String
Private $conPort As Integer ''Port of the server

Private Sub loadConst()
  
  Dim Conf As New Settings
  
  $conFilter = Conf["General/Filer", "*%*%*"]
  $conPort = Conf["Connection/Port", 9090]
  If $conPort = 9090 Then 
    Print("If you want to change the Port edit the Settings File: " & Conf.Path & "")
  Endif
  If Not Exist(conf.Path) Then
    Conf["General/Filer"] = $conFilter
    Conf["Connection/Port"] = $conPort
    conf.Save
  Endif
  
End

Public Sub Print(msg As String, Optional Level As Integer = 3)
  
  $log.Log(msg, Level)
  Print msg
  
End

Public Sub loadWebhooks(all As Boolean)
  
  $triggerList = New String[]
  Print("Load Webhooks....")
  Print("---------Active-------------")
  Dim s As String
  Dim hook As Webhook
  
  For Each s In Dir(User.Home &/ ".webhook/")
    
    hook = New Webhook(s, False, True)
    If hook.Active Or all Then
      
      webhooks.Add(hook)
      $triggerList.Add("/" & hook.Name)
      If hook.Active Then
        Print("[Enable] Loaded " & hook.Name)
      Else 
        Print("[Disable] Loaded " & hook.Name)
      Endif
    Endif
  Next
  Print("-----------------------------")
  Print("Webhooks Ok...")
  
End

Public Sub Main() ''Main Code
  
  Dim start_Server As Boolean
  Dim get_New_ID As Boolean
  Dim set_new_trigger As Boolean
  Dim wtest As Webhook
  Dim s As String
  Dim hook As Webhook
  Dim toggle_webhook As Boolean
  
  If Not Exist("/var/log/webhook") Then
    Try Mkdir "/var/log/webhook" 
    If Error Then 
      Print Error.Code
      Print Error.Text
      Print Error.Where
      Quit Error.code
    Else 
      Chgrp "/var/log/webhook" To "webhooklog"
      Chmod "/var/log/webhook" To "rwsrws---"
    Endif
  Endif
  
  $log = New Logger(4, "$(time): $(message)", "/var/log/webhook/" & Day(Now) & Month(Now) & Year(Now) & ".log")
  $log.Begin()
  
  Print("Hello world")
  Args.Begin(Application.Name & " [options]")
  start_Server = Args.Has("s", "start", "Start Server")
  get_New_ID = Args.Has("i", "newid", "get a new Request ID for a new Client")
  set_new_trigger = Args.Has("w", "new_webhook", "Add a new Webhook Dialog")
  toggle_webhook = Args.has("t", "toggle", "Toggle a webhook Enable/Disable")
  
  Args.End()
  
  If set_new_trigger Then
    Print("Add New Trigger...")
    AddTrigger.Add_Trigger()
  Endif
  
  If toggle_webhook Then 
    loadWebhooks(True)
    ToggleWebhook.ToggleWebhook(webhooks)
  Endif
  
  ''Start of the Server
  If start_Server Then
    Print("load id_list")
    load_idlist()
    loadConst()
    Print("Load Config....")
    loadWebhooks(False)
    Print("Init Server....")
    port_number = $conPort
    init_server()
  Endif
  
  ''Get New ID 
  If get_New_ID Then 
    Print("load id_list")
    load_idlist()
    newid()
  Endif
  
End

Public Sub load_idlist()
  
  Dim split As String
  Dim conf As File
  
  If Not Exist(User.Home &/ ".webhook") Then Mkdir User.Home &/ ".webhook"
  If Exist("/usr/lib/webhook/client_id.conf") Then 
    conf = Open "/usr/lib/webhook/client_id.conf" For Read 
    split = Read #conf, Lof(conf)
    Close #conf
    $conf = Split(split, "\n", "", True)
    $conf.Delete(0) ''this is the Template of the file
  Else 
    $conf = ["none|none|none"]
  Endif
  
End

Public Sub newid()
  
  Dim s As String
  Dim id_array As New String[](3)''[Id,Name,description]
  Dim conf As File
  
  Print("Get New ID")
  s = "Name of the new Client: "
  Write #File.Out, s
  Flush #File.Out
  Line Input #File.in, id_array[1]
  Print "description of the client:"
  Line Input #File.in, id_array[2]
  Print("Gen id")
  genid(id_array)
  If Exist("/usr/lib/webhook/client_id.conf") Then
    While Exist_ID(["id=" & id_array[0]]) ''wenn true dann neu gen
      id_array[0] = ""
      genid(id_array)
    Wend
  Endif
  
  Print id_array[0]
  
  If Not Exist("/usr/lib/webhook") Then Mkdir "/usr/lib/webhook"
  If Exist("/usr/lib/webhook/client_id.conf") Then 
    conf = Open "/usr/lib/webhook/client_id.conf" For Read Write 
    Seek #conf, -1
  Else 
    conf = Open "/usr/lib/webhook/client_id.conf" For Read Write Create 
    s = "#    ID     |   Name   |   description  |\n"
    Write #conf, s
  Endif
  
  s = id_array[0] & "|" & id_array[1] & "|" & id_array[2] & gb.NewLine & gb.NewLine
  Write #conf, s
  Close #conf
  
End 

Public Sub Exist_ID(requested_args As String[]) As Boolean
  
  Dim s As String
  Dim id As String
  
  If requested_args.Find("id=*", gb.Like) >= 0 Then
    id = requested_args[requested_args.Find("id=*", gb.Like)]
    
    id = Right(id, id.Len - 3)
  Else 
    id = ""
  Endif 
  
  For Each s In $conf
    If id = Split(s, "|")[0] Then Return True
    
  Next
  Return False
  
End

Public Sub genid(id_array As String[])
  
  Dim i As Integer
  Dim tmp As Integer
  
  i = 30
  
  While i > 0
    i -= 1
    tmp = Rand(1, 3)
    Select tmp
      Case 1
        id_array[0] &= Chr(Rand(49, 57))
      Case 2
        id_array[0] &= Chr(Rand(65, 90))
      Case 3
        id_array[0] &= Chr(Rand(97, 122))
    End Select
  Wend
  
End

Public Sub init_server()''create the server
  
  Try server.Close()
  
  Print("Set Port to: " & port_number & " ...")
  server.Port = port_number
  server.Type = Net.Internet
  server.Listen(1)
  While Server.Status Not Net.Active
    Wait 0.1
    Print("Starting...")
  Wend
  Print("Server Started and Listen")
  
End 

Public Sub server_Connection(RemoteHostIP As String)''Aufruf bei Verbindung
  
  Print(RemoteHostIP & " Conneted...")
  socket_list.Add(Server.Accept())
  
End

Public Sub Socket_Read()''Liest die Request vom Client
  
  Dim read_string As String
  Dim connection As Socket
  
  Print("Incomming Request\n\n")
  read_string = ""
  read_string = Read #Last, Lof(Last)
  Print(read_string)
  connection = Last
  Request(read_string, connection)
  
End

Public Sub Request(Request As String, connection As Socket)''Wertet die Request aus und leitet sie weiter
  
  Dim request_lines As String[]
  Dim requested_path As String[]
  Dim requested_args As String[]
  Dim i As Integer
  
  request_lines = Split(Request, gb.NewLine)
  If request_lines.Find("GET*", gb.Like) >= 0 Then 
    requested_path = Split(request_lines[request_lines.Find("GET*", gb.Like)], " ")
    Print requested_path
    requested_args = Split(requested_path[1], "?&")
    
    i = $triggerList.Find(requested_args[0])
    If i > -1 Then
      webhook_Action($triggerList[i], webhooks[i], requested_args, connection)
    Else 
      
      Send_ACK(connection, 400)
    Endif
    
    ' Select requested_args[0]
    '   Case "/test"
    '     webhook_test(requested_args, connection)
    '   Case "/alarm"
    '     webhook_einsatz(requested_args, connection)
    '   Case "/response"
    '     webhook_reponse(requested_args, connection)
    '   Case Else 
    '     Send_ACK(connection, 400)
    ' End Select
  Endif
  
End

Public Sub webhook_Action(trigger As String, hook As Webhook, requested_args As String[], connection As Socket)
  
  Dim ID As Boolean
  Dim s As String
  Dim sa As String[]
  Dim Coll As New Collection
  Dim key As String
  Dim keyword As String
  Dim indexa As Integer
  Dim indexb As Integer
  Dim sb As String
  Dim sc As String
  Dim sd As String
  
  If hook.CheckID Then 
    ID = Exist_ID(requested_args)
    
  Else 
    ID = True
    Send_ACK(connection, 200)
  Endif
  
  If ID Then 
    Send_ACK(connection, 200)
    For Each key In hook.keyWordList
      If requested_args.Find(key & "=*", gb.Like) >= 0 Then
        keyword = requested_args[requested_args.Find(key & "=*", gb.Like)]
        Coll[key] = Right(keyword, keyword.Len - 1 - key.Len)
      Else 
        Coll[key] = ""
      Endif 
    Next
    
    For Each s In hook.Action
      sa = Split(s, " ", "\"")
      If sa.Find("$conFilter", gb.Like) > -1 Then
        s = sa[sa.Find("$conFilter", gb.like)]
        indexa = String.InStr(s, "%")
        indexb = String.InStr(s, "%", indexa + 1)
        sb = String.Left(s, indexa - 1)
        sc = String.Right(s, -indexb)
        sd = String.Mid(s, indexa + 1, indexb - indexa - 1)
        
        For Each key In hook.keyWordList
          If key == String.Left(sd, key.Len) Then
            
            sd = Coll[key]
            s = sb & sd & sc
            Print(s)
            sa[sa.Find("$conFilter", gb.like)] = s
            Break 
          Endif
        Next
      Endif
      Exec sa Wait
      
    Next
  Else 
    Send_ACK(connection, 403)
  Endif
Catch 
  Print(Error.Code)
  Print(Error.Text)
  Print(Error.Where)
  
End

Public Sub Send_ACK(connection As Socket, success_code As Integer, Optional keyword As String)''Sendet die Antwort an den Client zur√ºck
  
  Dim response As String
  
  Select success_code
    Case 200
      response = "HTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 2\n\nok"
      
    Case 403
      response = "HTTP/1.1 403 Forbidden\nContent-Type: text/plain\nConnection: close\nContent-Length: 24\n\nDie Anfrage ist verboten"
    Default 
      response = "HTTP/1.1 400 Bad Request\nContent-Type: text/plain\nConnection: close\nContent-Length: 38\n\nDie Anfrage enthaelt ungueltige Syntax."
      
  End Select 
  Write #connection, response, response.Len
  Flush #connection
  
End
