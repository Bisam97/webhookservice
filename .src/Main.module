' Gambas module file

Private server As New ServerSocket As "server"
Private port_number As Integer
Private socket_list As New Socket[]
Private $conf As String[]
Private webhooks As New Webhook[]
Private $triggerList As String[]

Public Sub Main() ''Main Code
  
  Dim start_Server As Boolean
  Dim get_New_ID As Boolean
  Dim set_new_trigger As Boolean
  Dim wtest As Webhook
  Dim s As String
  Dim hook As Webhook
  
  Print "Hello world"
  Args.Begin(Application.Name & " [options]")
  start_Server = Args.Has("s", "start", "Start Server")
  get_New_ID = Args.Has("i", "newid", "get a new Request ID for a new Client")
  set_new_trigger = Args.Has("w", "new_webhook", "Add a new Webhook Dialog")
  Args.End()
  
  If set_new_trigger Then
    Print "Add New Trigger..."
    AddTrigger.Add_Trigger()
  Endif
  
  Print "load id_list"
  load_idlist()
  
  ''Start of the Server
  If start_Server Then
    $triggerList = New String[]
    Print "Load Webhooks....\n-------------------------"
    
    For Each s In Dir(User.Home &/ ".webhook/")
      hook = New Webhook(s, False, True)
      webhooks.Add(hook)
      $triggerList.Add("/" & hook.Name)
      Print "Loaded " & hook.Name
    Next
    Print "-------------------------\n Webhooks Ok..."
    Print "Init Server...."
    port_number = 9090
    init_server()
  Endif
  
  ''Get New ID 
  If get_New_ID Then 
    newid()
  Endif
  
End

Public Sub load_idlist()
  
  Dim split As String
  Dim conf As File
  
  If Not Exist(User.Home &/ ".webhook") Then Mkdir User.Home &/ ".webhook"
  If Exist("/usr/lib/webhook/client_id.conf") Then 
    conf = Open "/usr/lib/webhook/client_id.conf" For Read 
    split = Read #conf, Lof(conf)
    Close #conf
    $conf = Split(split, "\n", "", True)
    $conf.Delete(0) ''this is the Template of the file
  Else 
    $conf = ["none|none|none"]
  Endif
  
End

Public Sub newid()
  
  Dim s As String
  Dim id_array As New String[](3)''[Id,Name,description]
  Dim conf As File
  
  Print "Gen New ID"
  s = "Name of the new Client: "
  Write #File.Out, s
  Flush #File.Out
  Line Input #File.in, id_array[1]
  Print "description of the client:"
  Line Input #File.in, id_array[2]
  Print "Gen id"
  genid(id_array)
  If Exist("/usr/lib/webhook/client_id.conf") Then
    While Exist_ID(id_array[0]) ''wenn true dann neu gen
      id_array[0] = ""
      genid(id_array)
    Wend
  Endif
  
  Print id_array[0]
  
  If Not Exist("/usr/lib/webhook") Then Mkdir "/usr/lib/webhook"
  If Exist("/usr/lib/webhook/client_id.conf") Then 
    conf = Open "/usr/lib/webhook/client_id.conf" For Read Write 
    Seek #conf, -1
  Else 
    conf = Open "/usr/lib/webhook/client_id.conf" For Read Write Create 
    s = "#    ID     |   Name   |   description  |\n"
    Write #conf, s
  Endif
  
  s = id_array[0] & "|" & id_array[1] & "|" & id_array[2] & gb.NewLine & gb.NewLine
  Write #conf, s
  Close #conf
  
End 

Public Sub Exist_ID(requested_args As String[]) As Boolean
  
  Dim s As String
  Dim id As String
  
  If requested_args.Find("id=*", gb.Like) >= 0 Then
    id = requested_args[requested_args.Find("id=*", gb.Like)]
    
    id = Right(id, id.Len - 3)
  Else 
    id = ""
  Endif 
  
  For Each s In $conf
    If id = Split(s, "|")[0] Then Return True
    
  Next
  Return False
  
End

Public Sub genid(id_array As String[])
  
  Dim i As Integer
  Dim tmp As Integer
  
  i = 30
  
  While i > 0
    i -= 1
    tmp = Rand(1, 3)
    Select tmp
      Case 1
        id_array[0] &= Chr(Rand(49, 57))
      Case 2
        id_array[0] &= Chr(Rand(65, 90))
      Case 3
        id_array[0] &= Chr(Rand(97, 122))
    End Select
  Wend
  
End

Public Sub init_server()''create the server
  
  Try server.Close()
  
  Print "Set Port to: " & port_number & " ..."
  server.Port = port_number
  server.Type = Net.Internet
  server.Listen(1)
  While Server.Status Not Net.Active
    Wait 0.1
    Print "Starting..."
  Wend
  Print "Server Started and Listen"
  
End 

Public Sub server_Connection(RemoteHostIP As String)''Aufruf bei Verbindung
  
  Print RemoteHostIP & " Conneted..."
  socket_list.Add(Server.Accept())
  
End

Public Sub Socket_Read()''Liest die Request vom Client
  
  Dim read_string As String
  Dim connection As Socket
  
  Print "Incomming Request\n\n"
  read_string = ""
  read_string = Read #Last, Lof(Last)
  Print read_string
  connection = Last
  Request(read_string, connection)
  
End

Public Sub Request(Request As String, connection As Socket)''Wertet die Request aus und leitet sie weiter
  
  Dim request_lines As String[]
  Dim requested_path As String[]
  Dim requested_args As String[]
  Dim i As Integer
  
  request_lines = Split(Request, gb.NewLine)
  If request_lines.Find("GET*", gb.Like) >= 0 Then 
    requested_path = Split(request_lines[request_lines.Find("GET*", gb.Like)], " ")
    Print requested_path
    requested_args = Split(requested_path[1], "?&")
    
    i = $triggerList.Find(requested_args[0])
    If i > -1 Then
      webhook_Action($triggerList[i], webhooks[i], requested_args, connection)
    Endif
    ' Select requested_args[0]
    '   Case "/test"
    '     webhook_test(requested_args, connection)
    '   Case "/alarm"
    '     webhook_einsatz(requested_args, connection)
    '   Case "/response"
    '     webhook_reponse(requested_args, connection)
    '   Case Else 
    '     Send_ACK(connection, 400)
    ' End Select
  Endif
  
End

Public Sub webhook_Action(trigger As String, hook As Webhook, requested_args As String[], connection As Socket)
  
  Dim ID As Boolean
  Dim s As String
  Dim sa As String[]
  Dim Coll As New Collection
  Dim key As String
  Dim keyword As String
  
  If hook.CheckID Then 
    ID = Exist_ID(requested_args)
    
  Else 
    ID = True
    Send_ACK(connection, 200)
  Endif
  
  If ID Then 
    Send_ACK(connection, 200)
    For Each key In hook.keyWordList
      If requested_args.Find(key & "=*", gb.Like) >= 0 Then
        keyword = requested_args[requested_args.Find(key & "=*", gb.Like)]
        Coll[key] = Right(keyword, keyword.Len - 1 - key.Len)
      Else 
        Coll[key] = ""
      Endif 
    Next
    
    For Each s In hook.Action
      sa = Split(s, " ", "\"")
      If sa.Find("%*", gb.Like) Then
        s = sa[sa.Find("%*", gb.like)]
        s = String.Right(s, -1)
        For Each key In hook.keyWordList
          If key == String.Left(s, key.Len) Then
            s = String.Right(s, -key.Len)
            s = Coll[key] & s
            sa[sa.Find("%*", gb.like)] = s
            Break 
          Endif
        Next
      Endif
      Exec sa Wait
      
    Next
  Else 
    Send_ACK(connection, 403)
  Endif
  
End

Public Sub webhook_reponse(requested_args As String[], connection As Socket)
  
  Dim sender_id As String ''Wer hat gesendet
  
  If requested_args.Find("id=*", gb.Like) >= 0 Then
    sender_id = requested_args[requested_args.Find("id=*", gb.Like)]
    
    sender_id = Right(sender_id, sender_id.Len - 3)
  Else 
    sender_id = ""
  Endif
  If Exist_ID(sender_id) Then 
    Exec ["curl", "http://ubuntu:8087/set/0_userdata.0.firesoftware.Rückmeldung?value=true"] Wait
    Send_ACK(connection, 200)
  Endif
  
End

Public Sub webhook_test(requested_args As String[], connection As Socket)''Macht den Webhook "test" abarbeiten 
  
  Dim sender_id As String ''Wer hat gesendet
  Dim keyword As String
  
  ''this is WIP
  If requested_args.Find("id=*", gb.Like) >= 0 Then
    sender_id = requested_args[requested_args.Find("id=*", gb.Like)]
    
    sender_id = Right(sender_id, sender_id.Len - 3)
    If requested_args.Find("s=*", gb.Like) >= 0 Then
      keyword = requested_args[requested_args.Find("s=*", gb.Like)]
      keyword = Right(keyword, keyword.Len - 2)
    Else 
      keyword = ""
    Endif 
  Else 
    sender_id = ""
  Endif
  If Exist_ID(sender_id) Then 
    Print "Von ID: " & sender_id & "\n mit dem Stichwort: " & keyword
    Send_ACK(connection, 200, keyword)
  Else 
    Send_ACK(connection, 403)
  Endif
  
End

Public Sub webhook_einsatz(requested_args As String[], connection As Socket)''Macht den Webhook "Einsatz" abarbeiten 
  
  Dim sender_id As String ''Wer hat gesendet
  Dim keyword As String
  Dim kategorie As String
  
  ''this is WIP
  If requested_args.Find("id=*", gb.Like) >= 0 Then
    sender_id = requested_args[requested_args.Find("id=*", gb.Like)]
    
    sender_id = Right(sender_id, sender_id.Len - 3)
    If requested_args.Find("s=*", gb.Like) >= 0 Then
      keyword = requested_args[requested_args.Find("s=*", gb.Like)]
      keyword = Right(keyword, keyword.Len - 2)
    Else 
      keyword = ""
    Endif 
    If requested_args.Find("k=*", gb.Like) >= 0 Then
      kategorie = requested_args[requested_args.Find("k=*", gb.Like)]
      kategorie = Right(kategorie, kategorie.Len - 2)
    Else 
      kategorie = ""
    Endif 
    If Exist_ID(sender_id) Then 
      Exec ["curl", "http://ubuntu:8087/set/0_userdata.0.firesoftware.stichwort?value=" & keyword] Wait
      Exec ["curl", "http://ubuntu:8087/set/0_userdata.0.firesoftware.kategorie?value=" & kategorie] Wait
      Exec ["curl", "http://ubuntu:8087/set/0_userdata.0.firesoftware.Alarm?value=true"] Wait
    Endif
  Else 
    sender_id = ""
  Endif
  If Exist_ID(sender_id) Then 
    Print "Von ID: " & sender_id & "\n mit dem Stichwort: " & keyword & "\n mit der kategorie: " & kategorie
    Send_ACK(connection, 200, keyword)
  Else 
    Send_ACK(connection, 403)
  Endif
  
End

Public Sub Send_ACK(connection As Socket, success_code As Integer, Optional keyword As String)''Sendet die Antwort an den Client zurück
  
  Dim response As String
  
  Select success_code
    Case 200
      response = "HTTP/2 200 OK\nContent-Type: text/plain\nContent-Length: 2\n\nok"
      
    Case 403
      response = "HTTP/2 403 Forbidden\nContent-Type: text/plain\nConnection: close\nContent-Length: 24\n\nDie Anfrage ist verboten"
    Default 
      response = "HTTP/2 400 Bad Request\nContent-Type: text/plain\nConnection: close\nContent-Length: 38\n\nDie Anfrage enthaelt ungueltige Syntax."
      
  End Select 
  Write #connection, response, response.Len
  Flush #connection
  
End
