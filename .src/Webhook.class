' Gambas class file

Public Const Version As Float = 0.5 ' TODO: Erhöhen der zahl je änderung der Klasse

Private $name As String
Private $Action As String[]
Private $checkID As Boolean
Private $Version As Float ' TODO: Erhöhen der zahl je änderung der Klasse
Private $keywordList As String[]
Private $Active As Boolean
Private $Histroy As Histroy
Private $CollAction As Collection[]

Property Read Name As String
Property Read Action As String[] '' deprecated
Property Read CollAction As Collection[]
Property Read CheckID As Boolean
Property Read keyWordList As String[]
Property Read Active As Boolean
Property Read LastChanger As String

Private Sub loadconf(Path As String)
  
  Dim sInput As String
  
  Dim hSettings As Settings
  
  $histroy = New Histroy
  hSettings = New Settings(User.home &/ ".webhook/" & Path)
  $name = hSettings["Webhook/Name"] 
  $Version = CFloat(hSettings["Webhook/Version"])
  $checkID = hSettings["Webhook/checkID"]
  $Action = Split(hSettings["Webhook/Action"], "|")
  $keywordList = Split(hSettings["Webhook/KeyWordList"], "|")
  $Active = hSettings["Webhook/Enable", 0]
  If hSettings.Exist("Webhook/CollAction") Then $CollAction = JSON.Decode(hSettings["Webhook/CollAction", ""])
  If hSettings.Exist("Histroy/String") Then $histroy.LoadFromString(hSettings["Histroy/String"])
  If $Version < Webhook.Version Then updateConf()
  
End

Private Sub updateConf()
  
  Dim hSettings As Settings
  
  hSettings = New Settings(User.home &/ ".webhook/" & $name & ".conf")
  While $Version < Version
    
    Select $Version ''Check Version
        
      Case 0 To 0.1
        Main.Print("Update " & $name & " to V 0.2")
        $keywordList = ["test"]
        $Version = 0.2
        saveToConf()
      Case 0 To 0.2
        Main.Print("Update " & $name & " to V 0.3")
        $Version = 0.3
        $Active = True
        saveToConf()
      Case 0 To 0.3
        Main.Print("Update " & $name & " to V 0.4")
        $Version = 0.4
        $Active = True
        $Histroy = New Histroy
        $Histroy.AddEntry("Updater| Update to V 0.4")
        saveToConf()
      Case 0 To 0.4
        Main.Print("Update " & $name & " to V 0.5")
        $Version = 0.5
        $Histroy.AddEntry("Updater| Update to V 0.5")
        ConvertAction()
        $Histroy.AddEntry("Updater| Action Convert to Collection")
        LoadAction()
        saveToConf()
      Case Else 
        Print "No Update " & Me.Name & " Version Up to date"
    End Select
  Wend
  
End

Public Sub ConvertAction()
  
  Dim s As String
  Dim Prg As String
  Dim Par As String
  Dim ParHtmlConv As Boolean
  Dim NewAction As String[]
  
  NewAction = New String[]
  
  For Each s In $Action
    Prg = Split(s, " ")[0]
    Par = Split(s, " ").Extract(1, -1).Join(" ")
    ParHtmlConv = True 
    NewAction.Add(Prg & "µ" & Par & "µ" & ParHtmlConv)
    
  Next
  $Action = NewAction
  
End

Public Sub LoadAction()
  
  Dim s As String
  Dim c As Collection
  Dim spl As String[]
  
  $CollAction = New Collection[]
  For Each s In $Action
    c = New Collection
    spl = Split(s, "µ")
    c.Add(spl.First, "Prg")
    c.Add(spl.Last, "ParHtmlConv")
    spl.Remove(0)
    spl.Remove(spl.Max)
    c.Add(spl.Join(" "), "Par")
    $CollAction.Add(c)
  Next
  
End

Public Sub saveToConf() As Boolean
  
  Dim hSettings As Settings
  
  hSettings = New Settings(User.home &/ ".webhook/" & $name & ".conf")
  hSettings["Webhook/Name"] = $name
  hSettings["Webhook/checkID"] = $checkID
  hSettings["Webhook/Action"] = $Action.Join("|")
  hSettings["Webhook/Version"] = CStr($Version)
  hSettings["Webhook/KeyWordList"] = $keywordList.Join("|")
  hSettings["Webhook/Enable"] = $Active
  hSettings["Histroy/String"] = $Histroy.SaveToString()
  hSettings["Webhook/CollAction"] = JSON.Encode($CollAction)
  hSettings.Save()
  Return True
Catch 
  Return False
  
End

Public Sub _new(Name As String, CheckID As Boolean, Optional nameIsPath As Boolean, Optional Action As String[], Optional Key As String[], Optional CollAction As Collection[])
  
  If nameIsPath Then 
    
    loadconf(name)
    
  Else 
    $histroy = New Histroy
    $name = name
    $checkID = CheckID
    $Action = Action
    $keywordList = Key
    $Active = True
    $CollAction = CollAction
    $histroy.AddEntry("Create Webhook")
    $Version = Version  
    
  Endif
  
End

Public Sub EDIT(i As Integer, s As String)
  
  Dim c As Collection
  Dim spl As String[]
  
  Select i
    Case 1 'Edit Name
      $histroy.AddEntry(User.Name & " | Name Changed " & $name & " -> " & s)
      Move User.home &/ ".webhook/" & $name & ".conf" To User.home &/ ".webhook/" & s & ".conf"
      $name = s
      saveToConf()
    Case 2 'Edit Check ID
      $histroy.AddEntry(User.Name & " | CheckID Changed [" & $checkID & "] -> [" & s & "]")
      $checkID = s
      saveToConf()
    Case 3 'Add Key
      $histroy.AddEntry(User.Name & " | Add Keyword -> " & s)
      $keywordList.Add(s)
      saveToConf()
    Case 4 'Remove Key
      $histroy.AddEntry(User.Name & " | Remove Keyword -> " & s)
      $keywordList.Delete($keywordList.Find(s))
      saveToConf()
    Case 5 'Add Action
      $histroy.AddEntry(User.Name & " | Add Action to Script Collection-> " & s)
      c = New Collection
      spl = Split(s, "µ")
      c.Add(spl.First, "Prg")
      c.Add(spl.Last, "ParHtmlConv")
      spl.Remove(0)
      spl.Remove(spl.Find(spl.Last))
      c.Add(spl.Join(" "), "Par")
      $CollAction.Add(c)
      $Action.Add(s)
      saveToConf()
    Case 6 'Remove Action
      $histroy.AddEntry(User.Name & " | Remove Action from Script -> " & s)
      $CollAction.Delete(CInt(s))
      saveToConf()
  End Select
  
End

Private Function Name_Read() As String
  
  Return $name
  
End

Private Function Action_Read() As String[]
  
  Return $Action
  
End

Private Function CheckID_Read() As Boolean
  
  Return $checkID
  
End

Private Function keyWordList_Read() As String[]
  
  Return $keywordList
  
End

Private Function Active_Read() As Boolean
  
  Return $Active
  
End

Public Function Toggle()
  
  $Active = Not $Active
  
End

Private Function LastChanger_Read() As String
  
  Return ""
  
End

Private Function CollAction_Read() As Collection[]
  
  Return $CollAction
  
End
